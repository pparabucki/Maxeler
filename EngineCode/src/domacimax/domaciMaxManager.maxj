package domacimax;

import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.IOLink.IODestination;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;

public class domaciMaxManager {

	private static final String s_kernelName = "domaciMaxelerKernel";

	public static void main(String[] args) {
		domaciMaxEngineParameters params = new domaciMaxEngineParameters(args);
		Manager manager = new Manager(params);
		Kernel kernel   = new domaciMaxKernel(manager.makeKernelParameters(s_kernelName));
		manager.setKernel(kernel);
		manager.setIO(
			link("nizC",   IODestination.CPU),
			link("nizX",   IODestination.CPU),
			link("data_out", IODestination.CPU));

		manager.createSLiCinterface(interfaceDefault());

		configBuild(manager, params);

		manager.build();
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.INT;
		CPUTypes   ftype = CPUTypes.DOUBLE;
		int        tsize = type.sizeInBytes();
		int 	   fsize = ftype.sizeInBytes();

		InterfaceParam  s = engine_interface.addParam("size", type);
		InterfaceParam  m = engine_interface.addParam("m", type);
		InterfaceParam  n = engine_interface.addParam("n", type);

		InterfaceParam loopOffset = engine_interface.getAutoLoopOffset(s_kernelName, "loop");
		engine_interface.ignoreAutoLoopOffset(s_kernelName, "loop");

		engine_interface.setTicks(s_kernelName, s*loopOffset);

		engine_interface.setStream("nizC",   CPUTypes.DOUBLE, s*fsize);
		engine_interface.setStream("nizX",   CPUTypes.DOUBLE, s*fsize);
		engine_interface.setStream("data_out", CPUTypes.DOUBLE, s*fsize);


		return engine_interface;
	}

	private static void configBuild(Manager manager, domaciMaxEngineParameters params) {
		manager.setEnableStreamStatusBlocks(true);


		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
		buildConfig.setEnableTimingAnalysis(false);
	}
}
